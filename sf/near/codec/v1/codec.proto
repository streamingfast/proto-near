syntax = "proto3";

package sf.near.codec.v1;

option go_package = "github.com/streamingfast/sf-near/pb/sf/near/codec/v1;pbcodec";

message Block {
  string author = 1;
  BlockHeader header = 2;
  repeated ChunkHeader chunk_headers = 3;
  repeated IndexerShard shards = 4;
  repeated StateChangeWithCause state_changes = 5;
}

message StateChangeWithCause {
  StateChangeValue value = 1;
  StateChangeCause cause = 2;
}

message StateChangeCause {
  oneof cause {
    NotWritableToDisk not_writable_to_disk = 1;
    InitialState initial_state = 2;
    TransactionProcessing  transaction_processing = 3;
    ActionReceiptProcessingStarted action_receipt_processing_started = 4;
    ActionReceiptGasReward action_receipt_gas_reward = 5;
    ReceiptProcessing receipt_processing = 6;
    PostponedReceipt postponed_receipt = 7;
    UpdatedDelayedReceipts updated_delayed_receipts = 8;
    ValidatorAccountsUpdate validator_accounts_update = 9;
    Migration migration = 10;
  }

  message NotWritableToDisk {}
  message InitialState {}
  message TransactionProcessing {CryptoHash tx_hash = 1;}
  message ActionReceiptProcessingStarted {CryptoHash receipt_hash = 1;}
  message ActionReceiptGasReward {CryptoHash tx_hash = 1;}
  message ReceiptProcessing {CryptoHash tx_hash = 1;}
  message PostponedReceipt {CryptoHash tx_hash = 1;}
  message UpdatedDelayedReceipts {}
  message ValidatorAccountsUpdate {}
  message Migration {}
}

message StateChangeValue {
  oneof value {
    AccountUpdate account_update = 1;
    AccountDeletion account_deletion = 2;
    AccessKeyUpdate access_key_update = 3;
    AccessKeyDeletion access_key_deletion = 4;
    DataUpdate data_update = 5;
    DataDeletion data_deletion = 6;
    ContractCodeUpdate contract_code_update = 7;
    ContractCodeDeletion contract_deletion = 8;
  }

  message AccountUpdate {string account_id = 1; Account account = 2;}
  message AccountDeletion {string account_id = 1;}
  message AccessKeyUpdate {
    string account_id = 1;
    PublicKey public_key = 2;
    AccessKey access_key = 3;
  }
  message AccessKeyDeletion {
    string account_id = 1;
    PublicKey public_key = 2;
  }
  message DataUpdate {
    string account_id = 1;
    bytes key = 2;
    bytes value = 3;
  }
  message DataDeletion {
    string account_id = 1;
    bytes key = 2;
  }
  message ContractCodeUpdate {
    string account_id = 1;
    bytes code = 2;
  }
  message ContractCodeDeletion {
    string account_id = 1;
  }
}

message Account {
  BigInt amount = 1;
  BigInt locked = 2;
  CryptoHash code_hash = 3;
  uint64 storage_usage = 4;
}

message BlockHeader {
  uint64 height = 1;
  uint64 prev_height = 2;
  CryptoHash epoch_id = 3;
  CryptoHash next_epoch_id = 4;
  CryptoHash hash = 5;
  CryptoHash prev_hash = 6;
  CryptoHash prev_state_root = 7;
  CryptoHash chunk_receipts_root = 8;
  CryptoHash chunk_headers_root = 9;
  CryptoHash chunk_tx_root = 10;
  CryptoHash outcome_root = 11;
  uint64 chunks_included = 12;
  CryptoHash challenges_root = 13;
  uint64 timestamp = 14;
  uint64 timestamp_nanosec = 15;
  CryptoHash random_value = 16;
  repeated ValidatorStake validator_proposals = 17;
  repeated bool chunk_mask = 18;
  BigInt gas_price = 19;
  uint64 block_ordinal = 20;
  BigInt total_supply = 21;
  repeated SlashedValidator challenges_result = 22;
  uint64 last_final_block_height = 23;
  CryptoHash last_final_block = 24;
  uint64 last_ds_final_block_height = 25;
  CryptoHash last_ds_final_block = 26;
  CryptoHash next_bp_hash = 27;
  CryptoHash block_merkle_root = 28;
  bytes epoch_sync_data_hash = 29;
  repeated Signature approvals = 30;
  Signature signature = 31;
  uint32 latest_protocol_version = 32;
}

message BigInt {
  bytes bytes = 1;
}
message CryptoHash {
  bytes bytes = 1;
}

enum CurveKind {
  ED25519 = 0;
  SECP256K1 = 1;
}

message Signature {
  CurveKind type = 1;
  bytes bytes = 2;
}

message PublicKey {
  CurveKind type = 1;
  bytes bytes = 2;
}

message ValidatorStake {
  string account_id = 1;
  PublicKey public_key = 2;
  BigInt stake = 3;
}

message SlashedValidator {
  string account_id = 1;
  bool is_double_sign = 2;
}

message ChunkHeader {
  bytes chunk_hash = 1;
  bytes prev_block_hash = 2;
  bytes outcome_root = 3;
  bytes prev_state_root = 4;
  bytes encoded_merkle_root = 5;
  uint64 encoded_length = 6;
  uint64 height_created = 7;
  uint64 height_included = 8;
  uint64 shard_id = 9;
  uint64 gas_used = 10;
  uint64 gas_limit = 11;
  BigInt validator_reward = 12;
  BigInt balance_burnt = 13;
  bytes outgoing_receipts_root = 14;
  bytes tx_root = 15;
  repeated ValidatorStake validator_proposals = 16;
  Signature signature = 17;
}

message IndexerShard {
  uint64 shard_id = 1;
  IndexerChunk chunk = 2;
  repeated IndexerExecutionOutcomeWithReceipt receipt_execution_outcomes = 3;
}

message IndexerExecutionOutcomeWithReceipt {
  ExecutionOutcomeWithIdView execution_outcome = 1;
  Receipt receipt = 2;
}

message IndexerChunk {
  string author = 1;
  ChunkHeader header = 2;
  repeated IndexerTransactionWithOutcome transactions = 3;
  repeated Receipt receipts = 4;
}

message IndexerTransactionWithOutcome {
  SignedTransaction transaction = 1;
  IndexerExecutionOutcomeWithOptionalReceipt outcome = 2;
}

message SignedTransaction {
  string signer_id = 1;
  PublicKey public_key = 2;
  uint64 nonce = 3;
  string receiver_id = 4;
  repeated Action actions = 5;
  Signature signature = 6;
  CryptoHash hash = 7;
}

message IndexerExecutionOutcomeWithOptionalReceipt {
  ExecutionOutcomeWithIdView execution_outcome = 1;
  Receipt receipt = 2;
}

message Receipt {
  string predecessor_id = 1;
  string receiver_id = 2;
  CryptoHash receipt_id = 3;

  oneof receipt {
    ReceiptAction action = 10;
    ReceiptData data = 11;
  }
}

message ReceiptData {
  CryptoHash data_id = 1;
  bytes data = 2;
}

message ReceiptAction {
  string signer_id = 1;
  PublicKey signer_public_key = 2;
  BigInt gas_price = 3;
  repeated DataReceiver output_data_receivers = 4;
  repeated CryptoHash input_data_ids = 5;
  repeated Action actions = 6;
}

message DataReceiver {
  CryptoHash data_id = 1;
  string receiver_id = 2;
}

message ExecutionOutcomeWithIdView {
  MerklePath proof = 1;
  CryptoHash block_hash = 2;
  CryptoHash id = 3;
  ExecutionOutcome outcome = 4;
}

message ExecutionOutcome {
  repeated string logs = 1;
  repeated CryptoHash receipt_ids = 2;
  uint64 gas_burnt = 3;
  BigInt tokens_burnt = 4;
  string executor_id = 5;
  oneof status {
    UnknownExecutionStatus unknown = 20;
    FailureExecutionStatus failure = 21;
    SuccessValueExecutionStatus success_value = 22;
    SuccessReceiptIdExecutionStatus success_receipt_id = 23;
  }
  ExecutionMetadata metadata = 6;
}

enum ExecutionMetadata {
  ExecutionMetadataV1 = 0;
}

message SuccessValueExecutionStatus {
  bytes value = 1;
}

message SuccessReceiptIdExecutionStatus {
  CryptoHash id = 1;
}

message UnknownExecutionStatus {}
message FailureExecutionStatus {
  oneof failure {
    ActionError action_error = 1;
    InvalidTxError invalid_tx_error = 2;
  }
}

message ActionError {
  uint64 index = 1;
  oneof kind {
    AccountAlreadyExistsErrorKind account_already_exist = 21;
    AccountDoesNotExistErrorKind account_does_not_exist = 22;
    CreateAccountOnlyByRegistrarErrorKind create_account_only_by_registrar = 23;
    CreateAccountNotAllowedErrorKind create_account_not_allowed = 24;
    ActorNoPermissionErrorKind actor_no_permission =25;
    DeleteKeyDoesNotExistErrorKind  delete_key_does_not_exist = 26;
    AddKeyAlreadyExistsErrorKind  add_key_already_exists = 27;
    DeleteAccountStakingErrorKind delete_account_staking = 28;
    LackBalanceForStateErrorKind lack_balance_for_state = 29;
    TriesToUnstakeErrorKind tries_to_unstake = 30;
    TriesToStakeErrorKind tries_to_stake = 31;
    InsufficientStakeErrorKind insufficient_stake = 32;
    FunctionCallErrorKind function_call = 33; //todo: uncompleted
    NewReceiptValidationErrorKind new_receipt_validation = 34;
    OnlyImplicitAccountCreationAllowedErrorKind only_implicit_account_creation_allowed = 35;
    DeleteAccountWithLargeStateErrorKind delete_account_with_large_state = 36;
  }
}

message AccountAlreadyExistsErrorKind {
  string account_id = 1;
}

message AccountDoesNotExistErrorKind {
  string account_id = 1;
}

/// A top-level account ID can only be created by registrar.
message CreateAccountOnlyByRegistrarErrorKind{
  string account_id = 1;
  string registrar_account_id = 2;
  string predecessor_id = 3;
}

message CreateAccountNotAllowedErrorKind{
  string account_id = 1;
  string predecessor_id = 2;
}

message ActorNoPermissionErrorKind{
  string account_id = 1;
  string actor_id = 2;
}

message DeleteKeyDoesNotExistErrorKind{
  string account_id = 1;
  PublicKey public_key = 2;
}

message AddKeyAlreadyExistsErrorKind{
  string account_id = 1;
  PublicKey public_key = 2;
}

message DeleteAccountStakingErrorKind{
  string account_id = 1;
}

message LackBalanceForStateErrorKind{
  string account_id = 1;
  BigInt balance = 2;
}

message TriesToUnstakeErrorKind{
  string account_id = 1;
}

message TriesToStakeErrorKind{
  string account_id = 1;
  BigInt stake = 2;
  BigInt locked = 3;
  BigInt balance = 4;
}

message InsufficientStakeErrorKind{
  string account_id = 1;
  BigInt stake = 2;
  BigInt minimum_stake = 3;
}

////////////////

message FunctionCallErrorKind {
  oneof function_call_error_ser {
    CompilationError compilation_error = 1;
    LinkError link_error = 2;
    MethodResolveError method_resolve_error = 3;
    WasmTrap wasm_trap = 4;
    WasmUnknownError wasm_unknown_error = 5;
    HostError host_error = 6;
    EVMError evm_error = 7;
    string execution_error = 8;
  }
}


message LinkError {
  string msg = 1;
}

message WasmUnknownError {}

message EVMError {}

message CompilationError {
  oneof kind {
    CodeDoesNotExistErrorCompilationErrorKind code_does_not_exist = 1;
    PrepareErrorCompilationErrorKind prepare_error = 2;
    WasmerCompileErrorCompilationErrorKind wasmer_compile_error = 3;
    UnsupportedCompilerCompilationErrorKind unsupported_compiler = 4;
  }
}

message CodeDoesNotExistErrorCompilationErrorKind {
  string account_id = 1;
}

message PrepareErrorCompilationErrorKind {
  PrepareError prepare_error = 1;
}

message WasmerCompileErrorCompilationErrorKind {
  string msg = 1;
}

message UnsupportedCompilerCompilationErrorKind {
  string msg = 1;
}

enum PrepareError {
  Serialization = 0;
  Deserialization = 1;
  InternalMemeoryDeclared = 2;
  GasInstrumentation = 3;
  StackHeightInstrumentation = 4;
  Instantiate = 5;
  Memory = 6;
}

enum MethodResolveError {
  MethodEmptyName = 0;
  MethodNotFound = 1;
  MethodInvalidSignature = 2;
}

enum WasmTrap {
  Unreachable = 0;
  IncorrectCallIndirectSignature = 1;
  MemoryOutOfBounds = 2;
  CallIndirectOOB = 3;
  IllegalArithmetic = 4;
  MisalignedAtomicAccess = 5;
  IndirectCallToNull = 6;
  StackOverflow = 7;
  GenericTrap = 8;
}

message HostError {
  oneof kind {
    BadUTF16 bad_utf16 = 1;
    BadUTF8 bad_utf8 = 2;
    GasExceeded gas_exceeded = 3;
    GasLimitExceeded gas_limit_exceeded = 4;
    EmptyMethodName empty_method_name = 5;
    GuestPanic guest_panic = 6;
    IntegerOverflow integer_overflow = 7;
    InvalidPromiseIndex invalid_promise_index = 8;
    CannotAppendActionToJointPromise cannot_append_action_to_joint_promise = 9;
    CannotReturnJointPromise cannot_return_joint_promise = 10;
    InvalidPromiseResultIndex invalid_promise_result_index = 11;
    InvalidRegisterId invalid_register_id = 13;
    IteratorWasInvalidated iterator_was_invalidated = 14;
    MemoryAccessViolation memory_access_violation = 15;
    InvalidReceiptIndex invalid_receipt_index = 16;
    InvalidIteratorIndex invalid_iterator_index = 17;
    InvalidAccountIdError invalid_account_id = 18;
    InvalidMethodName invalid_method_name = 19;
    InvalidPublicKey invalid_public_key = 20;
    ProhibitedInView prohibited_in_view = 21;
    NumberOfLogsExceeded number_of_logs_exceeded = 22;
    KeyLengthExceeded key_length_exceeded = 23;
    ValueLengthExceeded value_length_exceeded = 24;
    TotalLogLengthExceeded total_log_length_exceeded = 25;
    NumberPromisesExceeded number_promises_exceeded = 26;
    NumberInputDataDependenciesExceeded number_input_data_dependencies_exceeded = 27;
    ReturnedValueLengthExceeded returned_value_length_exceeded = 28;
    ContractSizeExceeded contract_size_exceeded = 29;
    Deprecated deprecated = 30;
    ECRecoverError ec_recovered_error = 31;
    AltBn128DeserializationError alt_bn128_deserialization_error = 32;
    AltBn128SerializationError alt_bn128_serialization_error = 33;
  }
}

message BadUTF16 {}
message BadUTF8 {}
message GasExceeded {}
message GasLimitExceeded {}
message EmptyMethodName {}
message GuestPanic {
  string panic_msg = 1;
}
message IntegerOverlow {}
message InvalidPromiseIndex {
  uint64 promise_idx = 1;
}
message CannotAppendActionToJointPromise {}
message CannotReturnJointPromise {}
message InvalidPromiseResultIndex {
  uint64 result_idx = 1;
}
message InvalidRegisterId {
  uint64 register_id = 1;
}
message IteratorWasInvalidated {
  uint64 iterator_index = 1;
}
message MemoryAccessViolation {}
message InvalidReceiptIndex {
  uint64 receipt_index = 1;
}
message InvalidIteratorIndex {
  uint64 interator_index = 1;
}
message InvalidAccountIdError {}
message InvalidMethodName {}
message InvalidPublicKey {}
message ProhibitedInView {
  string method_name = 1;
}
message NumberOfLogsExceeded {
  uint64 limit = 1;
}
message KeyLengthExceeded {
  uint64 length = 1;
  uint64 limit = 2;
}
message ValueLengthExceeded {
  uint64 length = 1;
  uint64 limit = 2;
}
message TotalLogLengthExceeded {
  uint64 length = 1;
  uint64 limit = 2;
}
message NumberPromisesExceeded {
  uint64 number_of_promises = 1;
  uint64 limit = 2;
}
message NumberInputDataDependenciesExceeded {
  uint64 number_of_input_data_dependencies = 1;
  uint64 limit = 2;
}
message ReturnedValueLengthExceeded {
  uint64 length = 1;
  uint64 limit = 2;
}
message Deprecated {
  string method_name = 1;
}
message ECRecoverError {
  string msg = 1;
}
message AltBn128DeserializationError {
  string msg = 1;
}
message AltBn128SerializationError {
  string msg = 1;
}
////////////////

message NewReceiptValidationErrorKind{
  oneof kind {
    InvalidPredecessorIdError invalid_predecessor_id = 1;
    InvalidReceiverIdError invalid_receiver_id = 2;
    InvalidSignerIdError invalid_signer_id = 3;
    InvalidDataReceiverIdError invalid_data_receiver_id = 4;
    ReturnedValueLengthExceededError returned_value_length_exceeded = 5;
    NumberInputDataDependenciesExceededError number_of_input_data_dependencies_exceeded = 6;
    ActionsValidationErrorKindError actions_validation_error = 7;
  }
}

message InvalidPredecessorIdError {
  string account_id = 1;
}

message InvalidReceiverIdError {
  string account_id = 1;
}

message InvalidSignerIdError {
  string account_id = 1;
}

message InvalidDataReceiverIdError {
  string account_id = 1;
}

message ReturnedValueLengthExceededError {
  uint64 length = 1;
  uint64 limit = 2;
}

message NumberInputDataDependenciesExceededError {
  uint64 number_of_input_data_dependencies = 1;
  uint64 limit = 2;
}

message ActionsValidationErrorKindError {
  oneof kind {
    DeleteActionMustBeFinal delete_action_must_be_final = 1;
    TotalPrepaidGasExceeded total_prepaid_gas_exceeded = 2;
    TotalNumberOfActionsExceeded total_number_of_actions_exceeded = 3;
    AddKeyMethodNamesNumberOfBytesExceeded add_key_method_names_number_of_bytes_exceeded = 4;
    AddKeyMethodNameLengthExceeded add_key_method_name_length_exceeded = 5;
    IntegerOverflow integer_overflow = 6;
    InvalidAccountId invalid_account_id = 7;
    ContractSizeExceeded contract_size_exceeded = 8;
    FunctionCallMethodNameLengthExceeded function_call_method_name_length_exceeded = 9;
    FunctionCallArgumentsLengthExceeded function_call_arguments_length_exceeded = 10;
    UnsuitableStakingKey unsuitable_staking_key = 11;
    FunctionCallZeroAttachedGas function_call_zero_attached_gas = 12;
  }
}
message DeleteActionMustBeFinal {}
message TotalPrepaidGasExceeded {
  uint64 total_prepaid_gas = 1;
  uint64 limit = 2;
}
message TotalNumberOfActionsExceeded {
  uint64 total_number_of_actions = 1;
  uint64 limit = 2;
}
message AddKeyMethodNamesNumberOfBytesExceeded {
  uint64 total_number_of_bytes = 1;
  uint64 limit = 2;
}
message AddKeyMethodNameLengthExceeded {
  uint64 length = 1;
  uint64 limit = 2;
}
message IntegerOverflow {}
message InvalidAccountId {
  string account_id = 1;
}
message ContractSizeExceeded {
  uint64 size = 1;
  uint64 limit = 2;
}
message FunctionCallMethodNameLengthExceeded {
  uint64 length = 1;
  uint64 limit = 2;
}
message FunctionCallArgumentsLengthExceeded {
  uint64 length = 1;
  uint64 limit = 2;
}
message UnsuitableStakingKey {
  PublicKey public_key = 1; //TODO: is this correct?
}
message FunctionCallZeroAttachedGas {}

message OnlyImplicitAccountCreationAllowedErrorKind{
  string account_id = 1;
}

message DeleteAccountWithLargeStateErrorKind{
  string account_id = 1;
}

enum InvalidTxError {//todo: half baked
  InvalidAccessKeyError = 0;
  InvalidSignerId = 1;
  SignerDoesNotExist = 2;
  InvalidNonce = 3;
  NonceTooLarge = 4;
  InvalidReceiverId = 5;
  InvalidSignature = 6;
  NotEnoughBalance = 7;
  LackBalanceForState = 8;
  CostOverflow = 9;
  InvalidChain = 10;
  Expired = 11;
  ActionsValidation = 12;
  TransactionSizeExceeded = 13;
}

message MerklePath {
  repeated MerklePathItem path = 1;
}

message MerklePathItem {
  CryptoHash hash = 1;
  Direction direction = 2;
}

enum Direction {
  left = 0;
  right = 1;
}

message Action {
  oneof action {
    CreateAccountAction create_account = 1;
    DeployContractAction deploy_contract = 2;
    FunctionCallAction function_call = 3;
    TransferAction transfer = 4;
    StakeAction stake = 5;
    AddKeyAction add_key = 6;
    DeleteKeyAction delete_key = 7;
    DeleteAccountAction delete_account = 8;
  }
}

message CreateAccountAction {
}

message DeployContractAction {
  bytes code = 1;
}

message FunctionCallAction {
  string method_name = 1;
  bytes args = 2;
  uint64 gas = 3;
  BigInt deposit = 4;
}

message TransferAction {
  BigInt deposit = 1;
}

message StakeAction {
  BigInt stake = 1;
  PublicKey public_key = 2;
}

message AddKeyAction {
  PublicKey public_key = 1;
  AccessKey access_key = 2;
}

message DeleteKeyAction {
  PublicKey public_key = 1;
}

message DeleteAccountAction {
  string beneficiary_id = 1;
}

message AccessKey {
  uint64 nonce = 1;
  AccessKeyPermission permission = 2;
}

message AccessKeyPermission {
  oneof permission {
    FunctionCallPermission function_call = 1;
    FullAccessPermission full_access = 2;
  }
}

message FunctionCallPermission {
  BigInt allowance = 1;
  string receiver_id = 2;
  repeated  string method_names = 3;
}

message FullAccessPermission {
}
